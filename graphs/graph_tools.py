from langchain.agents import tool
from typing import List, Optional, Tuple

@tool
async def transcribe_audio_tool(audio_path: str, uid: str) -> dict:
    """
    Transcribes audio from a given file path using Whisper.
    Returns a dictionary with 'uid', 'audio_path', and 'transcribed_text'.
    """
    from tools.transcribe import transcribe_wrapper
    return await transcribe_wrapper(audio_path, uid=uid)

@tool
async def recognize_query_tool(query_text: str, uid: str, use_llm: bool = True) -> dict:
    """
    Extracts structured information (location, hospital_type, insurance) from a query text.
    Returns a dictionary with 'uid', 'query', 'intent', 'location', 'hospital_type', 'insurance'.
    """
    from tools.recognize import recognize_wrapper
    return await recognize_wrapper(query_text, uid=uid, use_llm=use_llm)

@tool
async def text_to_speech_tool(text: str, uid: str, output_dir: str = "audios/output", convert_to_dialogue: bool = False) -> dict:
    """
    Converts text to speech using OpenAI's TTS API and saves the audio to a file.
    Returns a dictionary with 'uid', 'text', and 'audio_path'.
    """
    from tools.text_to_speech import text_to_speech_wrapper
    return await text_to_speech_wrapper(text, uid, output_dir, convert_to_dialogue)

@tool
async def hospital_lookup_tool(
    user_lat: float,
    user_lon: float,
    intent: str, # find_nearest, find_best, find_all_in_radius
    hospital_types: Optional[List[str]] = None,
    insurance_providers: Optional[List[str]] = None,
    n_hospitals: int = 5, # default is 5 hospitals
    distance_km_radius: float = 300, # default is 300 kms
) -> List[dict]:
    """
    Looks up hospitals in the database based on user's location, desired hospital types,
    and insurance providers. Returns a list of matching hospitals sorted by distance.
    """
    from tools.hospital_lookup import hospital_lookup_wrapper
    return await hospital_lookup_wrapper(user_lat, user_lon, intent, hospital_types, insurance_providers, n_hospitals, distance_km_radius)

@tool
async def hospital_lookup_rag_tool(
    user_query:str,
    user_loc: str,
    user_lat: float,
    user_lon: float,
    intent: str,  # find_nearest, find_best, find_all_in_radius
    hospital_types: Optional[List[str]] = None,
    hospital_names: Optional[List[str]] = None,
    insurance_providers: Optional[List[str]] = None,
    n_hospitals: int = 5,  # default is 5 hospitals
    distance_km_radius: float = 300,  # default is 300 kms
    extra_results: int = 5
) -> Tuple[List[dict], str]:
    """
    Perform a RAG-based hospital lookup using FAISS vector search and LLM grounding.

    Parameters:
    -----------
    user_query : str
        User's Query
    user_loc : str
        Name of the user's location or city.
    user_lat : float
        Latitude of the user's location.
    user_lon : float
        Longitude of the user's location.
    intent : str
        User's intent for hospital search:
        - "find_nearest": prioritize proximity
        - "find_best": prioritize rating
        - "find_all_in_radius": return all hospitals within radius
    hospital_types : Optional[List[str]]
        List of desired hospital specialties (e.g., ["cardiology", "oncology"]).
    hospital_names : Optional[List[str]]
        List of desired hospital names
    insurance_providers : Optional[List[str]]
        List of accepted insurance providers to filter hospitals.
    n_hospitals : int
        Number of top hospitals to return (default 5).
    distance_km_radius : float
        Maximum distance in kilometers to filter hospitals (default 300 km).
    extra_results : int
        Number of additional hospitals to retrieve from FAISS for better LLM grounding.

    Returns:
    --------
    Tuple[List[dict], str]
        - List of hospital dictionaries matching user criteria.
          Each dict contains full hospital metadata including: 
          hospital_id, hospital_name, city, specialties, insurance_providers, rating, distance_km.
        - Dialogue string generated by the LLM suitable for TTS or text display.

    Notes:
    ------
    This function combines semantic retrieval (FAISS) with contextual grounding (LLM)
    to provide both structured hospital data and a user-friendly recommendation dialogue.
    """
    from tools.rag_retrieve import rag_search_wrapper
    return await rag_search_wrapper(user_query, user_loc, user_lat, user_lon, intent, hospital_types, hospital_names, insurance_providers, n_hospitals, distance_km_radius, extra_results)
